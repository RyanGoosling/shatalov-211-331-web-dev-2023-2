# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010 00000001 00000001 11000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ip = input('Введите IP: ')
host = ip.split('/')[0]
mask = int(ip.split('/')[1])
host_piece = host.split('.')
host_piece_bin_0 = bin(int(host_piece[0]))[2::]
host_piece_bin_0 = "0" * (8 - len(host_piece_bin_0)) + host_piece_bin_0
host_piece_bin_1 = bin(int(host_piece[1]))[2::]
host_piece_bin_1 = "0" * (8 - len(host_piece_bin_1)) + host_piece_bin_1
host_piece_bin_2 = bin(int(host_piece[2]))[2::]
host_piece_bin_2 = "0" * (8 - len(host_piece_bin_2)) + host_piece_bin_2
host_piece_bin_3 = bin(int(host_piece[3]))[2::]
host_piece_bin_3 = "0" * (8 - len(host_piece_bin_3)) + host_piece_bin_3
host_bin = host_piece_bin_0 + host_piece_bin_1 + host_piece_bin_2 + host_piece_bin_3
network = host_bin[0:mask] + "0" * (32 - mask)
network = str(int(network[0:8], 2)) + ' ' + str(int(network[8:16], 2)) + ' ' + str(int(network[16:24], 2)) + ' ' + str(int(network[24:32], 2))
network_piece = network.split()
mask_calc = "1" * mask + "0" * (32 - mask)

template = """
  Network:
  {2:<8}  {3:<8}  {4:<8}  {5:<8}
  {2:08b}  {3:08b}  {4:08b}  {5:08b}

  Mask:
  /{1}
  {6:<8}  {7:<8}  {8:<8}  {9:<8}
  {6:08b}  {7:08b}  {8:08b}  {9:08b}
"""

print(template.format(network, mask, int(network_piece[0]), int(network_piece[1]), int(network_piece[2]), int(network_piece[3]), int(mask_calc[0:8], 2), int(mask_calc[8:16], 2), int(mask_calc[16:24], 2), int(mask_calc[24:32], 2)))
